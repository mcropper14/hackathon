import cv2
import numpy as np


def coordinates(image, line_parameters):
    slope, intercept = line_parameters
    print(image.shape)
    y1 = image.shape[0]
    y2 = int(y1 * (3 / 5))
    # y = mx+b. x = (y-b)/m
    x1 = int((y1 - intercept) / slope)
    x2 = int((y2 - intercept) / slope)
    return np.array([x1, y1, x2, y2])


# average the slopes to draw one line
def average_slope(image, lines):
    left_fit = []  # coordinates from the left
    right_fit = []  # coordinates from the right
    for line in lines:
        x1, y1, x2, y2 = line.reshape(4)
        parameters = np.polyfit((x1, x2), (y1, y2), 1)
        slope = parameters[0]
        intercept = parameters[1]
        # checks if the slope is on the left or right
        # left -> negative, right -> positive
        if slope < 0:
            left_fit.append((slope, intercept))
        else:
            right_fit.append((slope, intercept))

    # average into single slope and intercept
    left_fit_avg = np.average(left_fit, axis=0)
    right_fit_avg = np.average(right_fit, axis=0)
    left_line = coordinates(image, left_fit_avg)
    right_line = coordinates(image, right_fit_avg)
    print(left_fit_avg, "left")
    print(right_fit_avg, "right")
    return np.array([left_line, right_line])


def canny(image):
    # grayscale from color image
    gray = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    # applying blur to reduce noise
    blur = cv2.GaussianBlur(gray, (5, 5), 0)

    # derivative f(x,y) to find the gradient, measures adjacent changes in all dir
    # outline the strongest gradient
    canny = cv2.Canny(blur, 50, 150)  # 1:3 threshold ratio
    return canny


# display lines
def display(image, lines):
    line_image = np.zeros_like(image)
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line.reshape(4)
            cv2.line(line_image, (x1, y1), (x2, y2), (0, 0, 255), 10)
    return line_image


# returns the enclosed region, triangular place where lines are
def region(image):
    height = image.shape[0]
    polygons = np.array([[(200, height), (1100, height), (550, 250)]])
    mask = np.zeros_like(image)
    cv2.fillPoly(mask, polygons, 255)
    masked_image = cv2.bitwise_and(image, mask)
    return masked_image


'''
img = cv2.imread('test_image.jpg')
lane_image = np.copy(img)
canny_image = canny(lane_image)
cropped_image = region(canny_image)
#detect lines
lines = cv2.HoughLinesP(cropped_image, 2, np.pi/180, 100, np.array([]), minLineLength=40, maxLineGap=5)

averaged_lines = average_slope(lane_image, lines)

line_image = display(lane_image, averaged_lines )
combo = cv2.addWeighted(lane_image, 0.8, line_image, 1, 1)
cv2.imshow('result', combo)
cv2.waitKey(0) #displays the window until key pressed
'''

# creates a new video object
cap = cv2.VideoCapture("test2.mp4")
while (cap.isOpened()):
    _, frame = cap.read()
    canny_image = canny(frame)
    cropped_image = region(canny_image)
    # detect lines
    lines = cv2.HoughLinesP(cropped_image, 2, np.pi / 180, 100, np.array([]), minLineLength=40, maxLineGap=5)

    averaged_lines = average_slope(frame, lines)

    line_image = display(frame, averaged_lines)
    combo = cv2.addWeighted(frame, 0.8, line_image, 1, 1)
    cv2.imshow('result', combo)

    # displays the window until key pressed
    if cv2.waitKey(1) == ord('q'):
        break
cap.release()
cv2.destroyAllWindows()
